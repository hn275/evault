/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as DashboardRouteImport } from './routes/dashboard'
import { Route as IndexRouteImport } from './routes/index'
import { Route as DashboardIndexRouteImport } from './routes/dashboard/index'
import { Route as AuthIndexRouteImport } from './routes/auth/index'
import { Route as AuthGithubRouteImport } from './routes/auth/github'
import { Route as DashboardRepositoryRepoIDRouteImport } from './routes/dashboard/repository/$repoID'

const DashboardRoute = DashboardRouteImport.update({
  id: '/dashboard',
  path: '/dashboard',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const DashboardIndexRoute = DashboardIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => DashboardRoute,
} as any)
const AuthIndexRoute = AuthIndexRouteImport.update({
  id: '/auth/',
  path: '/auth/',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthGithubRoute = AuthGithubRouteImport.update({
  id: '/auth/github',
  path: '/auth/github',
  getParentRoute: () => rootRouteImport,
} as any)
const DashboardRepositoryRepoIDRoute =
  DashboardRepositoryRepoIDRouteImport.update({
    id: '/repository/$repoID',
    path: '/repository/$repoID',
    getParentRoute: () => DashboardRoute,
  } as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/dashboard': typeof DashboardRouteWithChildren
  '/auth/github': typeof AuthGithubRoute
  '/auth': typeof AuthIndexRoute
  '/dashboard/': typeof DashboardIndexRoute
  '/dashboard/repository/$repoID': typeof DashboardRepositoryRepoIDRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/auth/github': typeof AuthGithubRoute
  '/auth': typeof AuthIndexRoute
  '/dashboard': typeof DashboardIndexRoute
  '/dashboard/repository/$repoID': typeof DashboardRepositoryRepoIDRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/dashboard': typeof DashboardRouteWithChildren
  '/auth/github': typeof AuthGithubRoute
  '/auth/': typeof AuthIndexRoute
  '/dashboard/': typeof DashboardIndexRoute
  '/dashboard/repository/$repoID': typeof DashboardRepositoryRepoIDRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/dashboard'
    | '/auth/github'
    | '/auth'
    | '/dashboard/'
    | '/dashboard/repository/$repoID'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/auth/github'
    | '/auth'
    | '/dashboard'
    | '/dashboard/repository/$repoID'
  id:
    | '__root__'
    | '/'
    | '/dashboard'
    | '/auth/github'
    | '/auth/'
    | '/dashboard/'
    | '/dashboard/repository/$repoID'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  DashboardRoute: typeof DashboardRouteWithChildren
  AuthGithubRoute: typeof AuthGithubRoute
  AuthIndexRoute: typeof AuthIndexRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/dashboard': {
      id: '/dashboard'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof DashboardRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/dashboard/': {
      id: '/dashboard/'
      path: '/'
      fullPath: '/dashboard/'
      preLoaderRoute: typeof DashboardIndexRouteImport
      parentRoute: typeof DashboardRoute
    }
    '/auth/': {
      id: '/auth/'
      path: '/auth'
      fullPath: '/auth'
      preLoaderRoute: typeof AuthIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/auth/github': {
      id: '/auth/github'
      path: '/auth/github'
      fullPath: '/auth/github'
      preLoaderRoute: typeof AuthGithubRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/dashboard/repository/$repoID': {
      id: '/dashboard/repository/$repoID'
      path: '/repository/$repoID'
      fullPath: '/dashboard/repository/$repoID'
      preLoaderRoute: typeof DashboardRepositoryRepoIDRouteImport
      parentRoute: typeof DashboardRoute
    }
  }
}

interface DashboardRouteChildren {
  DashboardIndexRoute: typeof DashboardIndexRoute
  DashboardRepositoryRepoIDRoute: typeof DashboardRepositoryRepoIDRoute
}

const DashboardRouteChildren: DashboardRouteChildren = {
  DashboardIndexRoute: DashboardIndexRoute,
  DashboardRepositoryRepoIDRoute: DashboardRepositoryRepoIDRoute,
}

const DashboardRouteWithChildren = DashboardRoute._addFileChildren(
  DashboardRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  DashboardRoute: DashboardRouteWithChildren,
  AuthGithubRoute: AuthGithubRoute,
  AuthIndexRoute: AuthIndexRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
